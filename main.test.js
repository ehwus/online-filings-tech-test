// Important: Do NOT edit this file
const main = require("./main");
const results = require("./mock-data");

describe("Coding challenge", () => {
    test("[Test 0] Should initialise browser", async done => {
        await main.start();
        expect(main.browser).not.toBeNull();
        done();
    });

    test("[Test 1] Should load JSON data", () => {
        main.loadFileToJson();
        expect(main.testData[0].action).toBe(results.test1);
    });

    test("[Test 2] Should return object with results array & excluded array", () => {
        const result = main.getLastTestParamValue();
        expect(result).toEqual(results.test2);
    });

    test("[Test 3] Should go to onlinefilings.co.uk and return true", async done => {
        const result = await main.goTo(main.testData[0].params);
        expect(result).toBe(results.test3);
        done();
    });

    test("[Test 4] Items should exist on the page", async done => {
        const result = await main.exists(main.testData[1].params);
        expect(result).toEqual(results.test4);
        done();
    });

    test("[Test 5] Should type company name in input", async done => {
        const result = await main.type(main.testData[2].params);
        expect(result).toBe(results.test5);
        done();
    });

    test("[Test 6] Should click on search button", async done => {
        const result = await main.click(main.testData[3].params);
        expect(result).toBe(results.test6);
        done();
    });

    test("[Test 7] Items should exist on the page", async done => {
        jest.setTimeout(10000);
        const result = await main.exists(main.testData[4].params);
        expect(result).toEqual(results.test7);
        done();
    });

    test("[Test 8] Should proceed to checkout", async done => {
        const result = await main.click(main.testData[5].params);
        expect(result).toBe(results.test8);
        done();
    });

    test("[Test 9] Items should exist on the page", async done => {
        jest.setTimeout(10000);
        const result = await main.exists(main.testData[6].params);
        expect(result).toEqual(results.test9);
        done();
    });

    test("[Test 10] Should close modal", async done => {
        const result = await main.click(main.testData[7].params);
        expect(result).toBe(results.test10);
        done();
    });

    test("[Test 11] Should select package", async done => {
        const result = await main.click(main.testData[8].params);
        expect(result).toBe(results.test11);
        done();
    });

    test("[Test 12] Should confirm price is equal to expected", async done => {
        const result = await main.equal(main.testData[9].params);
        expect(result).toBe(results.test12);
        done();
    });

});

afterAll(async done => {
    if (main.browser) await main.browser.close();
    done();
});